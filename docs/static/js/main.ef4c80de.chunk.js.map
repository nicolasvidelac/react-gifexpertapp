{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","checkList","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","console","error","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","json","data","map","title","id","images","downsized","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","log","className","img","src","alt","GifExpertApp","categories","setcategories","cat","includes","ReactDOM","render","document","getElementById"],"mappings":"yLAIaA,EAAc,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAC3C,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACE,sBAAMC,SAfa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,EACzBR,EAAUE,GACZH,EAAcG,GAEdO,QAAQC,MAAM,4CAGhBD,QAAQC,MAAM,oDAKhB,SACE,kCACG,IADH,2BAE2B,IACzB,uBACEC,KAAK,OACLC,MAAOV,EACPW,SA1BkB,SAACR,GACzBF,EAAcE,EAAES,OAAOF,QA0BjBG,YAAY,kB,uBClCTC,EAAO,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACfC,EADe,yFACyEC,UAC5FH,IAFmB,SAKAI,MAAMF,GALN,8BAKYG,OALZ,uCAKoBC,KAAKC,KAAI,YAChD,MAAO,CACLC,MAFyE,EAAxBA,MAGjDC,GAHyE,EAAjBA,GAIxDP,IAJyE,EAAbQ,OAIhDC,UAAUT,SATL,2CAAH,sDCGPU,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SACxB,ECA0B,SAACA,GAC3B,MAA0BhB,mBAAS,CACjCsB,KAAM,GACNO,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRjB,EAAQC,GAAUiB,MAAK,SAACC,GACtBH,EAAS,CACPT,KAAMY,EACNL,SAAS,SAGZ,CAACb,IAEGc,EDfmBK,CAAanB,GAA/Ba,EAAR,EAAQA,QAASP,EAAjB,EAAiBA,KAGjB,OAFAd,QAAQ4B,IAAId,GAGV,qCACE,6BAAKN,IAEL,qBAAKqB,UAAU,oCAAf,SACGR,GAAW,eAGd,qBAAKQ,UAAU,YAAf,SACGf,EAAKC,KAAI,SAACe,GACT,OACE,sBAAKD,UAAU,OAAf,UACE,qBAAKE,IAAKD,EAAIpB,IAAKsB,IAAKF,EAAId,QAC5B,kCAAKc,EAAId,WAFgBc,EAAIb,aEb9BgB,EAAe,WAC1B,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmBC,EAAnB,KAeA,OACE,qCACE,8CACA,uBACA,cAAC,EAAD,CAAa7C,cAjBC,SAACa,GACjBgC,EAAc,CAAChC,GAAF,mBAAY+B,MAgBgB3C,UARzB,SAAC6C,GACjB,OAAQF,EAAWG,SAASD,MAQ1B,uBACCF,EAAWnB,KAAI,SAACP,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,U,cCtBtB8B,EAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.ef4c80de.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories, checkList }) => {\r\n  const [inputValue, setinputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setinputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 3) {\r\n      if (checkList(inputValue)) {\r\n        setCategories(inputValue);\r\n      } else {\r\n        console.error(\"La categoria ya se encuentra en la lista\");\r\n      }\r\n    } else {\r\n      console.error(\"La categoria debe tener al menos 3 cataracteres\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        {\" \"}\r\n        Ingrese nueva categoria:{\" \"}\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Gordita\"\r\n        />\r\n      </label>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n  checkList: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=HgIn1e8mcQ17yDMx3tOYIUwntGz8M45n&q=${encodeURI(\r\n    category\r\n  )}`;\r\n\r\n  return (await (await fetch(url)).json()).data.map(({ title, id, images }) => {\r\n    return {\r\n      title: title,\r\n      id: id,\r\n      url: images.downsized.url,\r\n    };\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { loading, data } = useFetchGifs(category);\r\n  console.log(data);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n\r\n      <div className=\"animate__animated animate__fadeIn\">\r\n        {loading && \"Cargando..\"}\r\n      </div>\r\n\r\n      <div className=\"card-grid\">\r\n        {data.map((img) => {\r\n          return (\r\n            <div className=\"card\" key={img.id}>\r\n              <img src={img.url} alt={img.title} />\r\n              <p> {img.title}</p>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setcategories] = useState([\"One Punch\"]);\r\n\r\n  const addToList = (value) => {\r\n    setcategories([value, ...categories]);\r\n  };\r\n\r\n  /**\r\n   * metood para comprobar si el elemento ya se encuentra en la lista\r\n   * @param {String} cat\r\n   * @returns true si cat esta en la lista, false si no\r\n   */\r\n  const checkList = (cat) => {\r\n    return !categories.includes(cat);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <hr />\r\n      <AddCategory setCategories={addToList} checkList={checkList} />\r\n      <hr />\r\n      {categories.map((category) => (\r\n        <GifGrid key={category} category={category} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n","import \"./index.css\";\n\nimport { GifExpertApp } from \"./GifExpertApp\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}